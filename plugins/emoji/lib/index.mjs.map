{"version":3,"sources":["../src/emojify.ts","../src/findByName.ts","../src/data.ts","../src/utils.ts","../src/findByCode.ts","../src/find.ts","../src/get.ts","../src/has.ts","../src/random.ts","../src/replace.ts","../src/search.ts","../src/strip.ts","../src/unemojify.ts","../src/which.ts"],"sourcesContent":["import * as is from \"@sindresorhus/is\";\r\nimport { findByName } from \"./findByName.js\";\r\nimport { asFunction, normalizeName } from \"./utils.js\";\r\n\r\nexport type EmojifyFormat = (\r\n  name: string,\r\n  part?: string,\r\n  input?: string\r\n) => string;\r\n\r\nexport interface EmojifyOptions {\r\n  fallback?: ((part: string) => string) | string;\r\n  format?: EmojifyFormat;\r\n}\r\n\r\nexport const emojify = (\r\n  input: string,\r\n  { fallback, format = (name) => name }: EmojifyOptions = {}\r\n) => {\r\n  const fallbackFunction =\r\n    fallback === undefined ? fallback : asFunction(fallback);\r\n\r\n  is.assert.string(input);\r\n  is.assert.any([is.default.undefined, is.default.function_], fallbackFunction);\r\n  is.assert.function_(format);\r\n\r\n  return input.replace(/:[\\w\\-+]+:/g, (part) => {\r\n    const found = findByName(part);\r\n    if (found) {\r\n      return format(found.emoji, part, input);\r\n    }\r\n\r\n    if (fallbackFunction) {\r\n      return format(fallbackFunction(normalizeName(part)));\r\n    }\r\n\r\n    return format(part);\r\n  });\r\n};\r\n","import { assert } from \"@sindresorhus/is\";\r\nimport { emojiCodesByName } from \"./data.js\";\r\nimport { normalizeName } from \"./utils.js\";\r\n\r\nexport const findByName = (name: string) => {\r\n  assert.string(name);\r\n\r\n  const nameNormalized = normalizeName(name);\r\n  const emoji = emojiCodesByName.get(nameNormalized);\r\n\r\n  return emoji ? { emoji, key: nameNormalized } : undefined;\r\n};\r\n","import emojilib from \"emojilib\";\r\nimport { normalizeCode } from \"./utils.js\";\r\n\r\nexport interface Emoji {\r\n  emoji: string;\r\n  key: string;\r\n}\r\n\r\nexport const emojiData = Object.entries(emojilib.lib).map(\r\n  ([name, { char: emoji }]) => [name, emoji] as const\r\n);\r\n\r\nexport const emojiCodesByName = new Map(emojiData);\r\n\r\nexport const emojiNamesByCode = new Map(\r\n  emojiData.map(([name, emoji]) => [normalizeCode(emoji), name])\r\n);\r\n","import charRegex from \"char-regex\";\r\n\r\nexport const charRegexMatcher = charRegex();\r\n\r\nexport function asFunction<T extends PropertyKey, Args extends unknown[]>(\r\n  input: ((...args: Args) => T) | T\r\n): (...args: Args) => T {\r\n  return typeof input === \"function\" ? input : () => input;\r\n}\r\n\r\n/**\r\n * Non spacing mark contained by some emoticons (65039 - 'Ô∏è' - 0xFE0F).\r\n *\r\n * It's the 'Variant Form', which provides more information so that emoticons\r\n * can be rendered as more colorful graphics. FE0E is a unicode text version\r\n * whereas FE0F should be rendered as a graphical version.\r\n * The code gracefully degrades.\r\n */\r\nconst NON_SPACING_MARK = String.fromCharCode(65039);\r\n\r\nconst nonSpacingRegex = new RegExp(NON_SPACING_MARK, \"g\");\r\n\r\n/**\r\n * Removes the non-spacing-mark from the emoji code.\r\n *\r\n * Never send a stripped version to clients, as it kills graphical emoticons.\r\n */\r\nexport function normalizeCode(code: string) {\r\n  return code.replace(nonSpacingRegex, \"\");\r\n}\r\n\r\nexport function normalizeName(name: string) {\r\n  return /:.+:/.test(name) ? name.slice(1, -1) : name;\r\n}\r\n\r\nexport function randomItem<T>(array: T[]) {\r\n  return array[Math.floor(Math.random() * array.length)];\r\n}\r\n","import { assert } from \"@sindresorhus/is\";\r\nimport { emojiNamesByCode } from \"./data.js\";\r\nimport { normalizeCode } from \"./utils.js\";\r\n\r\nexport const findByCode = (code: string) => {\r\n  assert.string(code);\r\n\r\n  const emojiNormalized = normalizeCode(code);\r\n  const key = emojiNamesByCode.get(emojiNormalized);\r\n\r\n  return key ? { emoji: emojiNormalized, key } : undefined;\r\n};\r\n","import { findByCode } from \"./findByCode.js\";\r\nimport { findByName } from \"./findByName.js\";\r\n\r\nexport const find = (codeOrName: string) => {\r\n  return findByCode(codeOrName) ?? findByName(codeOrName);\r\n};\r\n","import { assert } from \"@sindresorhus/is\";\r\nimport { emojiCodesByName } from \"./data.js\";\r\nimport { normalizeName } from \"./utils.js\";\r\n\r\nexport const get = (codeOrName: string) => {\r\n  assert.string(codeOrName);\r\n\r\n  return emojiCodesByName.get(normalizeName(codeOrName));\r\n};\r\n","import { assert } from \"@sindresorhus/is\";\r\nimport { emojiCodesByName, emojiNamesByCode } from \"./data.js\";\r\nimport { normalizeCode, normalizeName } from \"./utils.js\";\r\n\r\nexport const has = (codeOrName: string) => {\r\n  assert.string(codeOrName);\r\n\r\n  return (\r\n    emojiCodesByName.has(normalizeName(codeOrName)) ||\r\n    emojiNamesByCode.has(normalizeCode(codeOrName))\r\n  );\r\n};\r\n","import { emojiData } from \"./data.js\";\r\nimport { randomItem } from \"./utils.js\";\r\n\r\nexport const random = () => {\r\n  const [name, emoji] = randomItem(emojiData);\r\n  return { emoji, name };\r\n};\r\n","import { assert } from \"@sindresorhus/is\";\r\nimport { Emoji } from \"./data.js\";\r\nimport { findByCode } from \"./findByCode.js\";\r\nimport { asFunction, charRegexMatcher } from \"./utils.js\";\r\n\r\nexport type ReplaceReplacement = (\r\n  emoji: Emoji,\r\n  index: number,\r\n  string: string\r\n) => string;\r\n\r\nexport const replace = (\r\n  input: string,\r\n  replacement: ReplaceReplacement | string,\r\n  { preserveSpaces = false } = {}\r\n) => {\r\n  const replace = asFunction(replacement);\r\n\r\n  assert.string(input);\r\n  assert.function_(replace);\r\n  assert.boolean(preserveSpaces);\r\n\r\n  const characters = input.match(charRegexMatcher);\r\n  if (characters === null) {\r\n    return input;\r\n  }\r\n\r\n  return characters\r\n    .map((character, index) => {\r\n      const found = findByCode(character);\r\n      if (!found) {\r\n        return character;\r\n      }\r\n\r\n      if (!preserveSpaces && characters[index + 1] === \" \") {\r\n        characters[index + 1] = \"\";\r\n      }\r\n\r\n      return replace(found, index, input);\r\n    })\r\n    .join(\"\");\r\n};\r\n","import { assert } from \"@sindresorhus/is\";\r\nimport { emojiData } from \"./data\";\r\nimport { normalizeName } from \"./utils.js\";\r\n\r\nexport const search = (keyword: string) => {\r\n  assert.string(keyword);\r\n\r\n  keyword = normalizeName(keyword);\r\n\r\n  return emojiData\r\n    .filter(([name]) => name.includes(keyword))\r\n    .map(([name, emoji]) => ({ emoji, name }));\r\n};\r\n","import { replace } from \"./replace\";\r\n\r\nexport interface StripOptions {\r\n  preserveSpaces?: boolean;\r\n}\r\n\r\nexport const strip = (input: string, { preserveSpaces }: StripOptions = {}) =>\r\n  replace(input, \"\", { preserveSpaces });\r\n","import { assert } from \"@sindresorhus/is\";\r\nimport { charRegexMatcher } from \"./utils.js\";\r\nimport { which } from \"./which.js\";\r\n\r\nexport const unemojify = (input: string) => {\r\n  assert.string(input);\r\n\r\n  const characters = input.match(charRegexMatcher);\r\n  if (characters === null) {\r\n    return input;\r\n  }\r\n\r\n  return characters\r\n    .map((character) => which(character, { markdown: true }) ?? character)\r\n    .join(\"\");\r\n};\r\n","import { assert } from \"@sindresorhus/is\";\r\nimport skinTone from \"skin-tone\";\r\nimport { findByCode } from \"./findByCode\";\r\n\r\nexport interface WhichOptions {\r\n  markdown?: boolean;\r\n}\r\n\r\nexport const which = (\r\n  emoji: string,\r\n  { markdown = false }: WhichOptions = {}\r\n) => {\r\n  assert.string(emoji);\r\n  assert.boolean(markdown);\r\n\r\n  const result = findByCode(skinTone(emoji, \"none\"));\r\n  if (result === undefined) {\r\n    return undefined;\r\n  }\r\n\r\n  return markdown ? `:${result.key}:` : result.key;\r\n};\r\n"],"mappings":"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","names":["assert","assert","assert","assert","assert","assert","assert","replace","assert","assert","assert","assert","assert","assert","assert"]}